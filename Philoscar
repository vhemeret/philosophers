1 - PARSING
	- verifier que c'est que des chiffres.
	- verifier les int max
	- proteger + de 200 philos et - de 60 ms
	- ne pas oublier quand nb repas = 0
	- nb arguments
	-checker si nb philosophers = 0
	

nb__philo	time_death	 time_eat	time_sleep		(nb_eating)


2 - INIT
	- initialiser les structures :
		- 2 structures.
		- 1 pour les data
		- 1 pour les philos
		- double echange entre data et chaque philos 
							data
							/ | \
						   1  2  3
		- malloc si besoin (tableau de philos)
		- init ses mutex au bon endroit (mutex de data a init dans init data et mutex de philo dans init philo)
		- init chaque philos avec boucle while
		- remplir les struct de chaque philo (attribuer les forks, mettre les valeurs a 0, etc...)

3 - LANCEMENT DES THREADS
	- Initialiser le temps global (le start time)
	- Create les thread avec un pthread_create avec une boucle while pour create chaque philo.
	- Si t'as envie, lancer un thread de check death.
	- Join les philos pour superviser.

4 - ROUTINE
	- Verifier si c'est des philos pairs ou impairs pour un lancement opti
	- Creer la chrono propre a chque philo, il sera réinitialisé a chaque fin de repas
	- boucle while (normalent infinie) qui definit la routine. Les conditions sont : est ce qu'il y a un mort ou est ce que tout le monde a mangé assez.
	- IMPORTANT : dansles conditons du while (ou des if) mettre des fonctions qui vont pouvoir mutex.

5 - EAT
	- Verifier que personne n'est mort pour pouvoir manger et qui'il a 2 fourchettes
	- PICK FORKS :
		- Penser au cas ou il n'y a qu'un seul philo
	- RELEASE FORKS
		- Penser au cas ou un philo meurt et un autre n'a qu'une seule fourchette dans la main
	- Incrémenter le nombre de repas apres l'avoir fini
	- Réinitialisation du chrono
	- Relacher les mutex
	- Relacher les fourchettes hors de la condition de verification de mort

6 - THREAD DE LA mort
	- (Penser a mettre un petit usleep avant de lancer la boucle while pour permettre aux philos de bien s'initialiser)
	- Boucle while qui verifie si il n'y a pas deja de mort, ou si on a pas mangé assez.
	- Lock les mutex pour lire les donnés propres a data et aux philos
	- Verifier la difference entre le temps actuel et le temps du dernier repas
	- Si ce temps est supérieur au temps de mort, et s'il n'y a pas deja quelqu'un de mort et qu'ils n;ont pas mangé assez,
	alors passer l'interrupteur de mort a 1.
	- Print le message de mort avec le get time global.
	-Relacher les mutex.

7 - RAPPEL
	- Mutex pour print ses messages
	- Print son message en verifiant que personne n'est mort
	- Penser a utiliser des fonctions is dead ou has eaten enough pour pouvoir mutex dans ses conditions
	- MUTEX POUR CHAQUE VALEUR MODIFIABLE QUE CE SOIT EN LECTURE COMME EN ECRITURE
